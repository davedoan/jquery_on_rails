module JQueryOnRails
  module Helpers
    module JQueryUiHelper
      unless const_defined? :EFFECT_OPTIONS
        EFFECT_OPTIONS = {
          'Up' => {:mode=>:hide,:direction=>:vertical}, 'Down' => {:mode=>:show,:direction=>:vertical},
          'Left' => {:mode=>:hide,:direction=>:horizontal}, 'Right' => {:mode=>:show,:direction=>:horizontal},
          'Out' => {:mode=>:hide,:direction=>nil}, 'In' => {:mode=>:show,:direction=>nil},
          :fadeIn => {:mode=>:primitive,:direction=>nil}, :fadeOut => {:mode=>:primitive,:direction=>nil},
          :puff => {:direction=>nil}, :animate => {:mode=>:primitive,:direction=>nil},
          :size => {:direction=>nil}, :toggleAppear => {:mode=>:manualToggle,:direction=>nil}
        }.with_indifferent_access

        EFFECT_NAMES = {
          :toggleAppear=>'fade', :appear=>'fadeIn', :fade=>'fadeOut',
          :morph=>'animate', :shrink=>'sizeOut', :grow=>'sizeIn'
        }.with_indifferent_access
      end
      
      # Generates jQuery UI effects.  This expands upon the core jQuery 1.4 effects
      # that are generated by JQueryHelper#visual_effect
      def visual_effect(name, element_id=false, js_options={})
        element = element_id ? ActiveSupport::JSON.encode("##{element_id}") : "element"
        fx_opt = EFFECT_OPTIONS[name = name.to_s.camelize(:lower)] || {}
	      name = EFFECT_NAMES[name] || name

        if name.start_with? 'toggle'
	        fx_opt[:mode], name = :toggle, name[6,1].downcase+name[7..-1]
	        name = EFFECT_NAMES[name] || name
	      end
	      if ! EFFECT_OPTIONS.include? name and name.sub! /(Up|Down|Left|Right|Out|In)$/, ''
		      fx_opt = EFFECT_OPTIONS[$1].merge fx_opt
        end
        fx_opt = EFFECT_OPTIONS[name].merge fx_opt if EFFECT_OPTIONS.include? name
	      fx_opt.merge! js_options
	      
        if ! fx_opt.include? :direction then fx_opt[:direction] = "'vertical'"
			  elsif fx_opt[:direction].nil? then fx_opt.delete :direction
			  else fx_opt[:direction] = "'#{fx_opt[:direction]}'"
		    end
	      
        # [:endcolor, :direction, :startcolor, :scaleMode, :restorecolor]
        fx = "jQuery(#{element})"
        fx = "#{fx}.css('background-color','#{fx_opt.delete :startcolor}')" if fx_opt[:startcolor]
	      if name=='animate' then fx_opt[:backgroundColor] ||= fx_opt.delete :endcolor
	      elsif fx_opt[:endcolor] then fx = "#{fx}.animate('background-color','#{fx_opt.delete :endcolor}')"
        end
        method, fx_opt = fx_opt.delete(:mode), (options_for_javascript fx_opt unless fx_opt.empty?)
        
        if method == :primitive then "#{fx}.#{name}(#{fx_opt});"
        elsif method != :manualToggle then "#{fx}.#{method}('#{name}'#{','+fx_opt if fx_opt.present?});"
        else "(function(elem){ return elem['#{name}'+(elem.css('visiblity')!='hidden' ?'In':'Out')](#{fx_opt}); })(#{fx});"
        end
      end

    end
  end
end